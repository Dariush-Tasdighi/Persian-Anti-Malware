using System.Linq;

namespace Application;

delegate void SimpleCallback();

public partial class ScanFilesForm : Infrastructure.BaseForm
{
	public ScanFilesForm()
	{
		InitializeComponent();
	}

	private readonly object LockObject = new();

	public string? Path { get; set; }

	private long FileCount { get; set; }
	private long DirectoryCount { get; set; }
	private long TotalFileLength { get; set; }
	private long ScannedFileCount { get; set; }
	private long InfectedFileCount { get; set; }

	private string? CurrentFileScanning { get; set; }
	private string? CurrentPathScanning { get; set; }

	private System.TimeSpan ScanTimeTaken { get; set; }
	private System.Threading.Thread? ScanFilesThread { get; set; }
	private System.Threading.Thread? GetDirectoriesThread { get; set; }

	private System.Collections.Generic.List<string> Directories { get; set; } = [];
	private System.Collections.Generic.List<string> InfectedFiles { get; set; } = [];

	private void ScanFilesForm_Load
		(object sender, System.EventArgs e)
	{
		pathTextBox.Text = Path;
	}

	private void StartButton_Click
		(object sender, System.EventArgs e)
	{
		Reset();

		// **************************************************
		var now =
				System.DateTime.Now.TimeOfDay;

		var idleTimeFrom =
			new System.TimeSpan(hours: 1, minutes: 0, seconds: 0);

		var idleTimeTo =
			new System.TimeSpan(hours: 4, minutes: 0, seconds: 0);
		// **************************************************

		// **************************************************
		var getDirectoriesThreadStart =
			new System.Threading.ThreadStart(GetAllDirectories);

		GetDirectoriesThread =
			new System.Threading.Thread
			(start: getDirectoriesThreadStart);

		if (now >= idleTimeFrom && now <= idleTimeTo)
		{
			GetDirectoriesThread.Priority =
				System.Threading.ThreadPriority.Highest;
		}
		else
		{
			GetDirectoriesThread.Priority =
				System.Threading.ThreadPriority.Lowest;
		}

		GetDirectoriesThread.Start();
		// **************************************************

		// **************************************************
		var scanFilesThreadStart =
			new System.Threading.ThreadStart(ScanFiles);

		ScanFilesThread =
			new System.Threading.Thread
			(start: scanFilesThreadStart);

		if (now >= idleTimeFrom && now <= idleTimeTo)
		{
			ScanFilesThread.Priority =
				System.Threading.ThreadPriority.Highest;
		}
		else
		{
			ScanFilesThread.Priority =
				System.Threading.ThreadPriority.Lowest;
		}

		ScanFilesThread.Start();
		// **************************************************
	}

	private void Reset()
	{
		// **************************************************
		fileCountTextBox.Text = string.Empty;
		scanTimeTakenTextBox.Text = string.Empty;
		directoryCountTextBox.Text = string.Empty;
		totalFileLengthTextBox.Text = string.Empty;
		scannedFileCountTextBox.Text = string.Empty;
		infectedFileCountTextBox.Text = string.Empty;
		currentFileScanningTextBox.Text = string.Empty;
		currentPathScanningTextBox.Text = string.Empty;
		// **************************************************

		// **************************************************
		FileCount = 0;
		DirectoryCount = 0;
		TotalFileLength = 0;
		ScannedFileCount = 0;
		InfectedFileCount = 0;

		CurrentFileScanning = null;
		CurrentPathScanning = null;
		// **************************************************

		// **************************************************
		Directories.Clear();
		InfectedFiles.Clear();
		// **************************************************
	}

	private void GetAllDirectories()
	{
		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		GetAllDirectories(path: Path);

		stopwatch.Stop();

		ScanTimeTaken = stopwatch.Elapsed;

		DisplayScanTimeTaken();
	}

	private void GetAllDirectories(string? path)
	{
		if (string.IsNullOrWhiteSpace(value: path))
		{
			return;
		}

		DirectoryCount++;
		DisplayDirectoryCount();
		AddCurrentPathToDirectoriesList(path: path);
		UpdateAndDisplayFileCountAndTotalFileLength(path: path);

		var subDirectories =
			GetSubDirectories(path: path);

		if (subDirectories is null)
		{
			return;
		}

		foreach (var item in subDirectories)
		{
			GetAllDirectories(path: item);
		}
	}

	private void AddCurrentPathToDirectoriesList(string path)
	{
		lock (LockObject)
		{
			Directories.Add(item: path);
		}
	}

	private static System.Collections.Generic.List<string>? GetSubDirectories(string? path)
	{
		if (string.IsNullOrWhiteSpace(value: path))
		{
			return null;
		}

		var enumerationOptions =
			new System.IO.EnumerationOptions
			{
				BufferSize = 4096,

				IgnoreInaccessible = true,
				RecurseSubdirectories = false,
				//RecurseSubdirectories = true,
				ReturnSpecialDirectories = false, // Not (.) and (..)

				MaxRecursionDepth = int.MaxValue,
				MatchType = System.IO.MatchType.Win32,
				AttributesToSkip = System.IO.FileAttributes.None,
				MatchCasing = System.IO.MatchCasing.PlatformDefault,
			};

		var directories =
			System.IO.Directory.EnumerateDirectories(path: path,
			searchPattern: "*.*", enumerationOptions: enumerationOptions)
			.ToList()
			;

		return directories;
	}

	private static System.Collections.Generic.List<string>? GetFiles(string? path)
	{
		if (string.IsNullOrWhiteSpace(value: path))
		{
			return null;
		}

		var enumerationOptions =
			new System.IO.EnumerationOptions
			{
				BufferSize = 4096,

				IgnoreInaccessible = true,
				RecurseSubdirectories = false,
				//RecurseSubdirectories = true,
				ReturnSpecialDirectories = false, // Not (.) and (..)

				MaxRecursionDepth = int.MaxValue,
				MatchType = System.IO.MatchType.Win32,
				AttributesToSkip = System.IO.FileAttributes.None,
				MatchCasing = System.IO.MatchCasing.PlatformDefault,
			};

		var directories =
			System.IO.Directory.EnumerateFiles(path: path,
			searchPattern: "*.*", enumerationOptions: enumerationOptions)
			.ToList()
			;

		return directories;
	}

	private void UpdateAndDisplayFileCountAndTotalFileLength(string? path)
	{
		if (string.IsNullOrWhiteSpace(value: path))
		{
			return;
		}

		var files =
			GetFiles(path: path);

		if (files is null)
		{
			return;
		}

		foreach (var file in files)
		{
			FileCount++;

			var fileInfo =
				new System.IO.FileInfo(fileName: file);

			TotalFileLength += fileInfo.Length;
		}

		DisplayFileCount();
		DisplayTotalFileLength();
	}

	public void ScanFiles()
	{
		System.Threading.Thread.Sleep
			(millisecondsTimeout: 1000);

		var index = 0;

		while (Directories.Count > 0)
		{
			var path =
				Directories[index];

			CurrentPathScanning = path;
			DisplayCurrentPathScanning();

			var files =
				GetFiles(path: path);

			if (files is not null)
			{
				foreach (var file in files)
				{
					CurrentFileScanning = file;

					DisplayCurrentFileScanning();

					System.Threading.Thread.Sleep
						(millisecondsTimeout: 500);

					ScannedFileCount++;
					DisplayScannedFileCount();
				}
			}

			lock (LockObject)
			{
				Directories.RemoveAt(index: index);
			}
		}
	}

	#region Display Values in Controls

	private void DisplayDirectoryCount()
	{
		if (directoryCountTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayDirectoryCount);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			directoryCountTextBox.Text =
				DirectoryCount.ToString(format: "#,##0");
		}
	}

	private void DisplayFileCount()
	{
		if (fileCountTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayFileCount);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			fileCountTextBox.Text =
				FileCount.ToString(format: "#,##0");
		}
	}

	private void DisplayTotalFileLength()
	{
		if (totalFileLengthTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayTotalFileLength);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			totalFileLengthTextBox.Text =
				TotalFileLength.ToString(format: "#,##0 Bytes");
		}
	}

	private void DisplayScanTimeTaken()
	{
		if (scanTimeTakenTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayScanTimeTaken);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			scanTimeTakenTextBox.Text = ScanTimeTaken.ToString();
		}
	}

	private void DisplayCurrentFileScanning()
	{
		if (currentFileScanningTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayCurrentFileScanning);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			currentFileScanningTextBox.Text = CurrentFileScanning;
		}
	}

	private void DisplayCurrentPathScanning()
	{
		if (currentPathScanningTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayCurrentPathScanning);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			currentPathScanningTextBox.Text = CurrentPathScanning;
		}
	}

	private void DisplayScannedFileCount()
	{
		if (scannedFileCountTextBox.InvokeRequired)
		{
			var callback =
				new SimpleCallback(DisplayScannedFileCount);

			try
			{
				Invoke(method: callback);
			}
			catch { }
		}
		else
		{
			scannedFileCountTextBox.Text =
				ScannedFileCount.ToString(format: "#,##0");
		}
	}

	#endregion /Display Values in Controls
}
