using System.Linq;

namespace Application;

public partial class MainForm : Infrastructure.BaseForm
{
	public MainForm()
	{
		InitializeComponent();
	}

	private async void MainForm_Load
		(object sender, System.EventArgs e)
	{
		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;

		pathNameScanningLabel.Text = string.Empty;

		drivesCheckedListBox.SelectionMode =
			System.Windows.Forms.SelectionMode.One;

		infectedFilesCheckedListBox.SelectionMode =
			System.Windows.Forms.SelectionMode.One;

		RefreshDrives();

		await LoadMD5HashesAsync();
	}

	private async void CheckForUpdateButton_Click(object sender, System.EventArgs e)
	{
		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;

		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		bool hadUpdate = false;

		string message;
		var messageHelper =
			new Infrastructure.MessageHelper();

		try
		{
			hadUpdate =
				await
				Infrastructure.DownloadHelper.DownloadUpdatesAsync();

			if (hadUpdate == false)
			{
				message =
					"System is update.";
			}
			else
			{
				message =
					"System has been updated successfully.";
			}

			messageHelper.AddMessage(message: message);
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		if (hadUpdate)
		{
			await LoadMD5HashesAsync();
		}

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
	}

	private void RefreshDrivesButton_Click(object sender, System.EventArgs e)
	{
		RefreshDrives();
	}

	private void RefreshDrives()
	{
		drivesCheckedListBox.Items.Clear();

		var drives =
			System.IO.DriveInfo.GetDrives();

		foreach (var drive in drives)
		{
			drivesCheckedListBox.Items.Add(item: drive.Name);
		}
	}

	private async System.Threading.Tasks.Task LoadMD5HashesAsync()
	{
		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		string message;
		var messageHelper =
			new Infrastructure.MessageHelper();

		try
		{
			Infrastructure.MD5Hashes.Clear();
			await Infrastructure.MD5HashesLoader.LoadAsync();

			message =
				"Loading Malware Definitions Completed...";

			messageHelper.AddMessage(message: message);
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);

		var malwareCount = Infrastructure
			.MD5Hashes.List.Count.ToString(format: "#,##0");

		message =
			$"System Malware Count: {malwareCount}";

		messageHelper.AddMessage(message: message);

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
	}

	private async void ScanButton_Click
		(object sender, System.EventArgs e)
	{
		await ScanSelectedDrivesAsync();
	}

	private async System.Threading.Tasks.Task ScanSelectedDrivesAsync()
	{
		infectedFilesCheckedListBox.Items.Clear();

		System.Threading.Thread.Sleep(1000);

		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;
		selectAllInfectedFilesButton.Enabled = false;
		deleteSelectedInfectedFilesButton.Enabled = false;

		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		string message;
		var messageHelper =
			new Infrastructure.MessageHelper();

		var drives =
			GetSelectedDrives();

		if (drives is null)
		{
			message =
				"You did not specify any drive for scanning!";

			System.Windows.Forms.MessageBox.Show(text: message);

			scanButton.Enabled = true;
			checkForUpdateButton.Enabled = true;

			return;
		}

		var scannedFileCount = 0;

		try
		{
			foreach (var drive in drives)
			{
				var partialScannedFileCount =
					await
					ScanPathAsync(path: drive);

				scannedFileCount +=
					partialScannedFileCount;

				// **************************************************
				message =
					$"System Scan Completed.";

				messageHelper.AddMessage(message: message);
				// **************************************************
			}
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		// **************************************************
		var scannedFileCountString =
			scannedFileCount.ToString(format: "#,##0");

		message =
			$"Scanned File Count: {scannedFileCountString}";

		messageHelper.AddMessage(message: message);
		// **************************************************

		// **************************************************
		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);
		// **************************************************

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
		selectAllInfectedFilesButton.Enabled = true;
		deleteSelectedInfectedFilesButton.Enabled = true;
	}

	private System.Collections.Generic.List<string>? GetSelectedDrives()
	{
		if (drivesCheckedListBox.CheckedItems.Count == 0)
		{
			return null;
		}

		var list = new System
			.Collections.Generic.List<string>();

		foreach (var item in drivesCheckedListBox.CheckedItems)
		{
			if (item is null)
			{
				continue;
			}

			var drive =
				item.ToString();

			if (string.IsNullOrWhiteSpace(value: drive))
			{
				continue;
			}

			switch (drive.Length)
			{
				case 1:
				{
					drive = $"{drive}:\\";
					break;
				}

				case 2:
				{
					drive = $"{drive}\\";
					break;
				}
			}

			list.Add(item: drive);
		}

		return list;
	}

	private async System.Threading.Tasks.Task<int> ScanPathAsync(string path)
	{
		var scannedFileCount = 0;

		var enumerationOptions =
			new System.IO.EnumerationOptions
			{
				BufferSize = 4096,

				IgnoreInaccessible = true,
				RecurseSubdirectories = true,
				ReturnSpecialDirectories = false, // Not . and ..

				MaxRecursionDepth = int.MaxValue,
				MatchType = System.IO.MatchType.Win32,
				AttributesToSkip = System.IO.FileAttributes.None,
				MatchCasing = System.IO.MatchCasing.PlatformDefault,
			};

		var directories =
			System.IO.Directory.EnumerateDirectories
			(path: path, searchPattern: "*.*", enumerationOptions: enumerationOptions)
			.ToList()
			;

		directories.Add(item: path);

		if (path.Length <= 3)
		{
			var exceptionDirectory =
				$"{path}System Volume Information";

			directories.Remove(item: exceptionDirectory);
		}

		foreach (var currentDirectory in directories)
		{
			var directoryInfo =
				new System.IO.DirectoryInfo(path: currentDirectory);

			var fileInfos =
				directoryInfo.GetFiles
				(searchPattern: "*.*",
				searchOption: System.IO.SearchOption.TopDirectoryOnly);

			foreach (var fileInfo in fileInfos)
			{
				scannedFileCount++;

				await ScanFileAsync(pathName: fileInfo.FullName);
			}
		}

		pathNameScanningLabel.Text = string.Empty;

		return scannedFileCount;
	}

	private async System.Threading.Tasks.Task ScanFileAsync(string pathName)
	{
		pathNameScanningLabel.Text = pathName;

		var result =
			await
			Infrastructure
			.Utility.GetMD5HashAsync(pathName: pathName);

		if (Infrastructure.MD5Hashes.List.Contains(value: result))
		{
			infectedFilesCheckedListBox.Items.Add(item: pathName);
		}
	}

	private void SelectAllInfectedFilesButton_Click(object sender, System.EventArgs e)
	{
		SelectAllInfectedFiles();
	}

	private void SelectAllInfectedFiles()
	{
		for (int index = 0; index <= infectedFilesCheckedListBox.Items.Count - 1; index++)
		{
			infectedFilesCheckedListBox
				.SetItemChecked(index: index, value: true);
		}
	}

	private void DeleteSelectedInfectedFilesButton_Click(object sender, System.EventArgs e)
	{
		DeleteSelectedInfectedFiles();
	}

	private void DeleteSelectedInfectedFiles()
	{
		string message;

		if (infectedFilesCheckedListBox.CheckedItems.Count == 0)
		{
			message =
				"You did not specify any file for deleting!";

			System.Windows.Forms.MessageBox.Show(text: message);
		}

		for (int index = infectedFilesCheckedListBox.CheckedItems.Count - 1; index >= 0; index--)
		{
			var item =
				infectedFilesCheckedListBox.CheckedItems[index];

			if (item is null)
			{
				continue;
			}

			var pathName =
				item.ToString();

			if (string.IsNullOrWhiteSpace(value: pathName))
			{
				continue;
			}

			try
			{
				System.IO.File.Delete(path: pathName);
				infectedFilesCheckedListBox.Items.Remove(value: item);
			}
			catch (System.Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(text: ex.Message);
			}
		}
	}
}
