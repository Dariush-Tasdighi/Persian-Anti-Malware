namespace Application;

public partial class MainForm : Infrastructure.BaseForm
{
	public MainForm()
	{
		InitializeComponent();
	}

	private async void MainForm_Load
		(object sender, System.EventArgs e)
	{
		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;

		RefreshDrives();

		await LoadMD5HashesAsync();
	}

	private async void CheckForUpdateButton_Click(object sender, System.EventArgs e)
	{
		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;

		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		bool hadUpdate = false;

		string message;
		var messageHelper =
			new Infrastructure.MessageHelper();

		try
		{
			hadUpdate =
				await
				Infrastructure.DownloadHelper.DownloadUpdatesAsync();

			if (hadUpdate == false)
			{
				message =
					"System is update.";
			}
			else
			{
				message =
					"System has been updated successfully.";
			}

			messageHelper.AddMessage(message: message);
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		if (hadUpdate)
		{
			await LoadMD5HashesAsync();
		}

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
	}

	private void RefreshDrivesButton_Click(object sender, System.EventArgs e)
	{
		RefreshDrives();
	}

	private void RefreshDrives()
	{
		drivesCheckedListBox.Items.Clear();

		var drives =
			System.IO.DriveInfo.GetDrives();

		foreach (var drive in drives)
		{
			drivesCheckedListBox.Items.Add(item: drive.Name);
		}
	}

	private async System.Threading.Tasks.Task LoadMD5HashesAsync()
	{
		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		string message;
		var messageHelper =
			new Infrastructure.MessageHelper();

		try
		{
			Infrastructure.MD5Hashes.Clear();
			await Infrastructure.MD5HashesLoader.LoadAsync();

			message =
				"Loading Malware Definitions Completed...";

			messageHelper.AddMessage(message: message);
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);

		var malwareCount = Infrastructure
			.MD5Hashes.List.Count.ToString(format: "#,##0");

		message =
			$"System Malware Count: {malwareCount}";

		messageHelper.AddMessage(message: message);

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
	}

	private async void ScanButton_Click
		(object sender, System.EventArgs e)
	{
		string message;

		if (drivesCheckedListBox.CheckedItems.Count == 0)
		{
			message =
				"You did not specify and drive for scanning!";

			System.Windows.Forms.MessageBox.Show(text: message);

			return;
		}

		scanButton.Enabled = false;
		checkForUpdateButton.Enabled = false;

		var stopwatch =
			new System.Diagnostics.Stopwatch();

		stopwatch.Start();

		var messageHelper =
			new Infrastructure.MessageHelper();

		var scannedFileCount = 0;

		try
		{
			foreach (var item in drivesCheckedListBox.CheckedItems)
			{
				System.Windows.Forms.MessageBox.Show(item.ToString());
			}
		}
		catch (System.Exception ex)
		{
			message = ex.Message;
			messageHelper.AddMessage(message: message);
		}

		stopwatch.Stop();

		message =
			$"Time Taken: {stopwatch.Elapsed}";

		messageHelper.AddMessage(message: message);

		var scannedFileCountString =
			Infrastructure.MD5Hashes.List.Count.ToString(format: "#,##0");

		message =
			$"Scanned File Count: {scannedFileCount}";

		System.Windows.Forms.MessageBox.Show(text: messageHelper.ToString());

		scanButton.Enabled = true;
		checkForUpdateButton.Enabled = true;
	}
}
