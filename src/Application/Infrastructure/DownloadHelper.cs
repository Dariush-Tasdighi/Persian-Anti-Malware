namespace Infrastructure;

internal static class DownloadHelper : object
{
	static DownloadHelper()
	{
	}

	public static async
		System.Threading.Tasks.Task<bool> DownloadUpdatesAsync()
	{
		var hasUpdate = false;

		if (System.IO.Path.Exists(path: ApplicationSettings.Path) == false)
		{
			System.IO.Directory.CreateDirectory
				(path: ApplicationSettings.Path);
		}

		var index = 0;

		while (true)
		{
			var pathName = GetPathName
				(path: ApplicationSettings.Path, index: index);

			if (System.IO.File.Exists(path: pathName))
			{
				index++;
				continue;
			}

			var fileName =
				GetFileName(index: index);

			var url =
				$"{ApplicationSettings.BaseUrl}/{fileName}";

			var fileContent =
				await
				DownloadFileAsync(url: url);

			if (fileContent is null)
			{
				break;
			}

			hasUpdate = true;

			await System.IO.File.WriteAllTextAsync
				(path: pathName, contents: fileContent);

			index++;
		}

		return hasUpdate;
	}

	private static string GetPathName(string path, int index)
	{
		var fileName =
			GetFileName(index: index);

		var result =
			$"{path}\\{fileName}";

		return result;
	}

	private static string GetFileName(int index)
	{
		var indexString =
			index.ToString().PadLeft
			(totalWidth: 5, paddingChar: '0');

		var result =
			$"VirusShare_{indexString}.md5";

		return result;
	}

	private static async
		System.Threading.Tasks.Task<string?> DownloadFileAsync(string url)
	{
		using var client =
			new System.Net.Http.HttpClient();

		using var response =
			await client.GetAsync(requestUri: url);

		if (response.IsSuccessStatusCode)
		{
			var result =
				await
				response.Content.ReadAsStringAsync();

			return result;
		}
		else
		{
			return null;
		}
	}
}
