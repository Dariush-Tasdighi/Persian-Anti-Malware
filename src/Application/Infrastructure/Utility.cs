using System;

namespace Infrastructure;

internal class Utility : object
{
	static Utility()
	{
	}

	//public static string GetMD5Hash(string pathName)
	//{
	//	string result = "";
	//	string hashData = "";

	//	byte[] arrbytHashValue;
	//	System.IO.FileStream? fileStream = null;

	//	var md5Hasher =
	//		new System.Security.Cryptography.MD5CryptoServiceProvider();

	//	fileStream =
	//		new System.IO.FileStream
	//		(pathName, System.IO.FileMode.Open,
	//		System.IO.FileAccess.Read,
	//		System.IO.FileShare.ReadWrite);

	//	arrbytHashValue =
	//		md5Hasher.ComputeHash(fileStream);

	//	fileStream.Close();

	//	hashData =
	//		System.BitConverter.ToString(arrbytHashValue);

	//	hashData =
	//		hashData.Replace("-", "");

	//	result = hashData;

	//	return result;
	//}

	public static async System.Threading.Tasks.Task<string> GetMD5HashAsync(string pathName)
	{
		var bufferSize = 4096;

		using var md5 =
			System.Security.Cryptography.MD5.Create();

		using var stream =
			new System.IO.FileStream(path: pathName,
			mode: System.IO.FileMode.Open, access: System.IO.FileAccess.Read,
			share: System.IO.FileShare.Read, bufferSize: bufferSize, useAsync: true);

		int bytesRead;

		var buffer =
			new byte[bufferSize];

		do
		{
			//bytesRead =
			//	await
			//	stream.ReadAsync
			//	(buffer: buffer, offset: 0, count: bufferSize);

			bytesRead =
				await
				// AsMemory() -> using System;
				stream.ReadAsync(buffer: buffer.AsMemory(start: 0, length: bufferSize));

			if (bytesRead > 0)
			{
				md5.TransformBlock(inputBuffer: buffer, inputOffset: 0,
					inputCount: bytesRead, outputBuffer: null, outputOffset: 0);
			}
		} while (bytesRead > 0);

		md5.TransformFinalBlock
			(inputBuffer: buffer, inputOffset: 0, inputCount: 0);

		var arrbytHashValue = md5.Hash;

		if(arrbytHashValue == null)
		{
			throw new System.Exception("arrbytHashValue is null!");
		}

		var hashData =
			System.BitConverter.ToString(value: arrbytHashValue);

		hashData =
			hashData.Replace("-", "");

		hashData =
			hashData.ToUpperInvariant();

		var result = hashData;

		return result;
	}
}
